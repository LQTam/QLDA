{"ast":null,"code":"import _objectSpread from \"/home/dev/ictu/qlda/QLDA/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAUiB9zPQOu5p1m6ZSQ4ttQP1G_xrrVMV4\",\n  authDomain: \"luudulieunguoidung.firebaseapp.com\",\n  databaseURL: \"https://luudulieunguoidung.firebaseio.com\",\n  projectId: \"luudulieunguoidung\",\n  storageBucket: \"luudulieunguoidung.appspot.com\",\n  messagingSenderId: \"1061601470698\",\n  appId: \"1:1061601470698:web:807744e3e4265fb3e48f93\"\n}; // Initialize Firebase\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = async (email, password) => {\n      await app.auth().setPersistence(app.auth.Auth.Persistence.SESSION).then(() => {\n        return this.auth.signInWithEmailAndPassword(email, password);\n      });\n    };\n\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.providers.googleProvider);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref('users');\n\n    this.customers = () => this.db.ref('KhachHang');\n\n    this.customer = uid => this.db.ref(`KhachHang/${uid}`);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once('value').then(snap => {\n          const dbUser = snap.val();\n\n          if (!dbUser.roles) {\n            dbUser.roles = [];\n          }\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    app.initializeApp(firebaseConfig); // firebase.analytics();\n\n    this.auth = app.auth();\n    this.db = app.database();\n    this.providers = {\n      googleProvider: new app.auth.GoogleAuthProvider()\n    };\n  }\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/home/dev/ictu/qlda/QLDA/src/components/Firebase/firebase.js"],"names":["app","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","setPersistence","Auth","Persistence","SESSION","then","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","providers","googleProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","user","uid","db","ref","users","customers","customer","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","once","snap","dbUser","val","roles","initializeApp","database","GoogleAuthProvider"],"mappings":"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","sourcesContent":["import app from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAUiB9zPQOu5p1m6ZSQ4ttQP1G_xrrVMV4\",\n    authDomain: \"luudulieunguoidung.firebaseapp.com\",\n    databaseURL: \"https://luudulieunguoidung.firebaseio.com\",\n    projectId: \"luudulieunguoidung\",\n    storageBucket: \"luudulieunguoidung.appspot.com\",\n    messagingSenderId: \"1061601470698\",\n    appId: \"1:1061601470698:web:807744e3e4265fb3e48f93\"\n  };\n\n  \n\n  // Initialize Firebase\n  class Firebase {\n    constructor() {\n        app.initializeApp(firebaseConfig);\n        // firebase.analytics();\n        this.auth = app.auth();\n        this.db = app.database();\n        this.providers = {\n            googleProvider : new app.auth.GoogleAuthProvider(),\n        }\n    }\n    \n    doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n    doSignInWithEmailAndPassword = async (email, password) => {\n        await app.auth().setPersistence(app.auth.Auth.Persistence.SESSION)\n        .then(()=>{\n            return this.auth.signInWithEmailAndPassword(email,password);\n        })\n    };\n    doSignInWithGoogle = () => this.auth.signInWithPopup(this.providers.googleProvider);\n    doSignOut = () => this.auth.signOut();\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n    doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    user = uid => this.db.ref(`users/${uid}`);\n    users = () => this.db.ref('users');\n    customers = () => this.db.ref('KhachHang');\n    customer = uid => this.db.ref(`KhachHang/${uid}`);\n\n    onAuthUserListener = (next, fallback) =>\n        this.auth.onAuthStateChanged(authUser => {\n            if (authUser) {\n                this.user(authUser.uid)\n                    .once('value')\n                    .then(snap => {\n                        const dbUser = snap.val();\n\n                        if (!dbUser.roles) {\n                            dbUser.roles = [];\n                        }\n\n                        authUser = {\n                            uid: authUser.uid,\n                            email: authUser.email,\n                            ...dbUser,\n                        }\n\n                        next(authUser);\n                    });\n            } else {\n                fallback();\n            }\n        })\n\n    \n}\n\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}